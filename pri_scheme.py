# Author: Casey Betts, 2024
# This tool models earth-imaging satellite capabilities and uses gradient descent to optimize how the satellite will choose imaging targets. 
# The prioritization scheme is considered optimized when the revenu generated by the model is maximized. The model is supplied with a list of orders
# all having specific location data and dollar amounts associated to them.


from Optimizer import Optimizer
from sys import argv 

# Applicable file names with parameters
loc_parameter_inputs = argv[1]
loc_case_inputs = argv[2]


if __name__ == "__main__":
    
    # Create calculator object
    optimizer = Optimizer(loc_parameter_inputs, loc_case_inputs)
    optimizer.produce_optimized_curves()
    # optimizer.run_simple_cases()
    optimizer.orders.active_orders.to_csv('output_from_pri_scheme.csv')
    optimizer.display_results()





# Ideas
"""
- Make the curve easy to change
- Vet the current output and investigate

- Incoperate the max_cc into the scheduling logic
    - Use max_cc_weather_multiplyer =1/(Weather_Prediction - Max_CC + 1)
    - Cap the max_cc value at .8 (max_cc values close to 1 will cause the multiplyer to skyrocket)
- Add weather file name to readout
- Add a try block before creating the final .csv

- Try a version that updates the score directly based on dollar value

"""